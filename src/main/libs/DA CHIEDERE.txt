<?xml version="1.0" encoding="utf-8"?>

<FrameLayout xmlns:android="http://schemas.android.com/apk/res/android"
    android:layout_width="match_parent"
    android:layout_height="match_parent">

    <LinearLayout
        android:id="@+id/texts_layout"
        android:orientation="vertical"
        android:layout_width="fill_parent"
        android:layout_height="fill_parent"
        android:visibility="invisible">

        <TableLayout
            android:layout_width="fill_parent"
            android:layout_height="fill_parent"
            android:stretchColumns="*">

            <TableRow
                android:layout_weight="1"
                android:gravity="center"
                android:layout_width="match_parent"
                android:layout_height="wrap_content">

                <TextView android:text="@string/fr1_mean_absolute"
                    android:layout_width="fill_parent"
                    android:layout_height="fill_parent"
                    android:gravity="center" />

                <TextView android:text="@string/fr1_mean_weekly"
                    android:layout_width="fill_parent"
                    android:layout_height="fill_parent"
                    android:gravity="center" />

            </TableRow>

            <TableRow
                android:layout_weight="1"
                android:gravity="center"
                android:layout_width="match_parent"
                android:layout_height="wrap_content">

                <TextView android:text="@string/fr1_mean_daily"
                    android:layout_width="fill_parent"
                    android:layout_height="fill_parent"
                    android:gravity="center" />

                <TextView android:text="@string/fr1_mean_yesterday"
                    android:layout_width="fill_parent"
                    android:layout_height="fill_parent"
                    android:gravity="center" />

            </TableRow>

            <TableRow
                android:layout_weight="1"
                android:gravity="center"
                android:layout_width="match_parent"
                android:layout_height="wrap_content">

                <TextView android:text="@string/fr1_mean_today"
                    android:layout_width="fill_parent"
                    android:layout_height="fill_parent"
                    android:gravity="center" />

                <TextView android:text="@string/fr1_myDrone"
                    android:layout_width="fill_parent"
                    android:layout_height="fill_parent"
                    android:gravity="center" />

            </TableRow>

        </TableLayout>

    </LinearLayout>

    <LinearLayout
        android:id="@+id/buttons_layout"
        android:orientation="vertical"
        android:layout_width="fill_parent"
        android:layout_height="fill_parent">

        <TableLayout
            android:layout_width="fill_parent"
            android:layout_height="fill_parent"
            android:stretchColumns="*">

            <TableRow
                android:layout_weight="1"
                android:gravity="center"
                android:layout_width="match_parent"
                android:layout_height="wrap_content"
                android:baselineAligned="false">

                <Button android:text="@string/fr1_mean_absolute"
                    android:layout_width="fill_parent"
                    android:layout_height="fill_parent"
                    android:id="@+id/fr1_mean_absolute"
                    android:background="#02772d" />
                <Button android:text="@string/fr1_mean_weekly"
                    android:layout_width="fill_parent"
                    android:layout_height="fill_parent"
                    android:id="@+id/fr1_mean_weekly"
                    android:background="#0353ad" />

            </TableRow>

            <TableRow
                android:layout_weight="1"
                android:gravity="center"
                android:layout_width="match_parent"
                android:layout_height="wrap_content">

                <Button android:text="@string/fr1_mean_daily"
                    android:layout_width="fill_parent"
                    android:layout_height="fill_parent"
                    android:id="@+id/fr1_mean_daily"
                    android:background="#029f30" />

                <Button android:text="@string/fr1_mean_yesterday"
                    android:layout_width="fill_parent"
                    android:layout_height="fill_parent"
                    android:id="@+id/fr1_mean_yesterday"
                    android:background="#037af1" />

            </TableRow>

            <TableRow
                android:layout_weight="1"
                android:gravity="center"
                android:layout_width="match_parent"
                android:layout_height="wrap_content">

                <Button android:text="@string/fr1_mean_today"
                    android:layout_width="fill_parent"
                    android:layout_height="fill_parent"
                    android:id="@+id/fr1_mean_today"
                    android:background="#02e430" />

                <Button android:text="@string/fr1_myDrone"
                    android:layout_width="fill_parent"
                    android:layout_height="fill_parent"
                    android:id="@+id/fr1_myDrone"
                    android:background="#02a8ff" />

            </TableRow>

        </TableLayout>

    </LinearLayout>

</FrameLayout>

->open graph facebook:
package com.example.appiedipertrento;

import android.app.AlertDialog;
import android.app.ProgressDialog;
import android.content.DialogInterface;
import android.content.Intent;
import android.graphics.Bitmap;
import android.graphics.BitmapFactory;
import android.os.Bundle;
import android.support.v4.app.Fragment;
import android.util.Log;
import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.Button;
import android.widget.TextView;

import com.facebook.FacebookRequestError;
import com.facebook.HttpMethod;
import com.facebook.Request;
import com.facebook.RequestBatch;
import com.facebook.Response;
import com.facebook.Session;
import com.facebook.SessionState;
import com.facebook.UiLifecycleHelper;
import com.facebook.widget.FacebookDialog;

import org.brickred.socialauth.Profile;
import org.brickred.socialauth.android.DialogListener;
import org.brickred.socialauth.android.SocialAuthAdapter;
import org.brickred.socialauth.android.SocialAuthError;
import org.brickred.socialauth.android.SocialAuthListener;
import org.json.JSONException;
import org.json.JSONObject;

import java.util.Arrays;
import java.util.Collection;
import java.util.List;

/**
 * Created by Pietro on 27/12/13.
 * Copyright Pietro 2014
 */

public class MyAir extends Fragment{

    private static final String ARG_SECTION_NUMBER = "section_number";

    public quickMessage Mex;

    public String name = "";

    SocialAuthAdapter adapter = null;

    Button share = null;
    TextView userName = null;
    Button fbShare = null;

    public UiLifecycleHelper uiHelper;

    static final boolean UPLOAD_IMAGE = true;

    private static final String TAG = "MainFragment";

    private ProgressDialog progressDialog;

    private static final List<String> PERMISSIONS = Arrays.asList("publish_actions"); //"basic_info"


    private static final String PENDING_PUBLISH_KEY = "pendingPublishReauthorization";

    private boolean pendingPublishReauthorization = false;

    private Session.StatusCallback callback = new Session.StatusCallback() {
        @Override
        public void call(final Session session,
                         final SessionState state,
                         final Exception exception) {
            onSessionStateChange(session, state, exception);
        }
    };



    public static MyAir newInstance(int sectionNumber) {
        MyAir fragment = new MyAir();
        Bundle args = new Bundle();
        args.putInt(ARG_SECTION_NUMBER, sectionNumber);
        fragment.setArguments(args);
        return fragment;
    }


    public MyAir() {
    }

    @Override
    public void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        Mex = new quickMessage();
        uiHelper = new UiLifecycleHelper(getActivity(),callback);
        uiHelper.onCreate(savedInstanceState);

    }

    @Override
    public View onCreateView(LayoutInflater inflater, ViewGroup container,
                             final Bundle savedInstanceState) {
        View rootView = inflater.inflate(R.layout.fragment3, container, false);
        assert rootView != null;

        fbShare = (Button) rootView.findViewById(R.id.sharefb);
        click listener: publish_story;


        if (savedInstanceState != null) {
            pendingPublishReauthorization =
                    savedInstanceState.getBoolean(PENDING_PUBLISH_KEY, false);
        }

        return rootView;
    }



    private void onSessionStateChange(Session session, SessionState state, Exception exception) {
        if (state.isOpened()) {
            share.setVisibility(View.VISIBLE);
            userName.setVisibility(View.VISIBLE);

        } else if (state.isClosed()) {
            share.setVisibility(View.INVISIBLE);
            userName.setVisibility(View.INVISIBLE);
        }
    }

    private void publishStory() {

            // Show a progress dialog because the batch request could take a while.
            progressDialog = ProgressDialog.show(getActivity(), "","waiting...",true);

            try {
                // Create a batch request, firstly to post a new object and
                // secondly to publish the action with the new object's id.
                RequestBatch requestBatch = new RequestBatch();

                // Request: Staging image upload request
                // --------------------------------------------

                // If uploading an image, set up the first batch request
                // to do this.
                if (UPLOAD_IMAGE) {
                    // Set up image upload request parameters
                    Bundle imageParams = new Bundle();
                    Bitmap image = BitmapFactory.decodeResource(this.getResources(),
                            R.drawable.logo3);
                    imageParams.putParcelable("file", image);

                    // Set up the image upload request callback
                    Request.Callback imageCallback = new Request.Callback() {

                        @Override
                        public void onCompleted(Response response) {
                            // Log any response error
                            FacebookRequestError error = response.getError();
                            if (error != null) {
                                dismissProgressDialog();
                                Log.i(TAG, error.getErrorMessage());
                            }
                        }
                    };

                    // Create the request for the image upload
                    Request imageRequest = new Request(Session.getActiveSession(),
                            "me/staging_resources", imageParams,
                            HttpMethod.POST, imageCallback);

                    // Set the batch name so you can refer to the result
                    // in the follow-on object creation request
                    imageRequest.setBatchEntryName("imageUpload");

                    // Add the request to the batch
                    requestBatch.add(imageRequest);
                }

                // Request: Object request
                // --------------------------------------------

                // Set up the JSON representing the book
                JSONObject book = new JSONObject();

                // Set up the book image
                if (UPLOAD_IMAGE) {
                    // Set the book's image from the "uri" result from
                    // the previous batch request
                    book.put("image", "{result=imageUpload:$.uri}");
                }
                book.put("title", "My Air Quality");
                book.put("description",
                        "The AirQuality is now "+RealTimeCO.quality_text+" where I am.");
                JSONObject data = new JSONObject();
                data.put("co",Float.toString(RealTimeCO.quality_value)+" ppm");
                book.put("data", data);

                // Set up object request parameters
                Bundle objectParams = new Bundle();
                objectParams.putString("object", book.toString());
                // Set up the object request callback
                Request.Callback objectCallback = new Request.Callback() {

                    @Override
                    public void onCompleted(Response response) {
                        // Log any response error
                        FacebookRequestError error = response.getError();
                        if (error != null) {
                            dismissProgressDialog();
                            Mex.quickMessage(getActivity(),"We're sorry but an error has occurred!\nTry it again!");
                            Log.i(TAG, error.getErrorMessage());
                        }
                    }
                };

                // Create the request for object creation
                Request objectRequest = new Request(Session.getActiveSession(),
                        "me/objects/appiedipertrento:airquality", objectParams,
                        HttpMethod.POST, objectCallback);

                // Set the batch name so you can refer to the result
                // in the follow-on publish action request
                objectRequest.setBatchEntryName("objectCreate");

                // Add the request to the batch
                requestBatch.add(objectRequest);

                // Request: Publish action request
                // --------------------------------------------
                Bundle actionParams = new Bundle();
                // Refer to the "id" in the result from the previous batch request
                actionParams.putString("airquality", "{result=objectCreate:$.id}");
                // Turn on the explicit share flag
                actionParams.putString("fb:explicitly_shared", "true");

                // Set up the action request callback
                Request.Callback actionCallback = new Request.Callback() {

                    @Override
                    public void onCompleted(Response response) {
                        dismissProgressDialog();
                        FacebookRequestError error = response.getError();
                        if (error != null) {
                            Log.i(TAG, error.getErrorMessage());
                            Mex.quickMessage(getActivity(),"We're sorry but an error has occurred!\nTry it again!");
                        } else {
                            String actionId = null;
                            try {
                                JSONObject graphResponse = response
                                        .getGraphObject()
                                        .getInnerJSONObject();
                                actionId = graphResponse.getString("id");
                            } catch (JSONException e) {
                                Log.i(TAG + "JSONerror", e.getMessage());
                                Mex.quickMessage(getActivity(),"We're sorry but an error has occurred!\nTry it again!");
                            }
                            if (actionId != null){
                                Mex.quickMessage(getActivity(),"Successfully posted on your wall!");
                            }
                        }
                    }
                };

                // Create the publish action request
                Request actionRequest = new Request(Session.getActiveSession(),
                        "me/appiedipertrento:measure", actionParams, HttpMethod.POST,
                        actionCallback);

                // Add the request to the batch
                requestBatch.add(actionRequest);

                // Execute the batch request
                requestBatch.executeAsync();
            } catch (JSONException e) {
                Log.i(TAG + "JSONerror", e.getMessage());
                Mex.quickMessage(getActivity(),"We're sorry but an error has occurred!\nTry it again!");
                dismissProgressDialog();
            }
    }

    private void dismissProgressDialog() {
        // Dismiss the progress dialog
        if (progressDialog != null) {
            progressDialog.dismiss();
            progressDialog = null;
        }
    }

    /*
     * Helper method to check a collection for a string.
     */
    private boolean isSubsetOf(Collection<String> subset, Collection<String> superset) {
        for (String string : subset) {
            if (!superset.contains(string)) {
                return false;
            }
        }
        return true;
    }


    @Override
    public void onResume() {
        super.onResume();
        Session session = Session.getActiveSession();
        if (session != null &&
                (session.isOpened() || session.isClosed()) ) {
            onSessionStateChange(session, session.getState(), null);
        }
        uiHelper.onResume();
    }

    @Override
    public void onSaveInstanceState(Bundle outState) {
        super.onSaveInstanceState(outState);
        outState.putBoolean(PENDING_PUBLISH_KEY, pendingPublishReauthorization);
        uiHelper.onSaveInstanceState(outState);
    }

    @Override
    public void onPause() {
        super.onPause();
        uiHelper.onPause();
    }

    @Override
    public void onDestroy() {
        super.onDestroy();
        uiHelper.onDestroy();
    }

    @Override
    public void onActivityResult(int requestCode, int resultCode, Intent data) {
        super.onActivityResult(requestCode, resultCode, data);
        Session.getActiveSession().onActivityResult(getActivity(), requestCode, resultCode, data);
        uiHelper.onActivityResult(requestCode, resultCode, data, new FacebookDialog.Callback() {
            @Override
            public void onError(FacebookDialog.PendingCall pendingCall, Exception error, Bundle data) {
                Log.e("Activity", String.format("Error: %s", error.toString()));
            }

            @Override
            public void onComplete(FacebookDialog.PendingCall pendingCall, Bundle data) {
                Log.i("Activity", "Success!");
            }
        });
    }

    public void AlertDialogShow(){
        AlertDialog.Builder builder = new AlertDialog.Builder(getActivity(),AlertDialog.THEME_HOLO_LIGHT);
        builder.setTitle("Error")
                .setCancelable(false)
                .setMessage("Connect your Sensordrone!")
                .setPositiveButton("Ok", new DialogInterface.OnClickListener() {
                    @Override
                    public void onClick(DialogInterface dialogInterface, int i) {
                        //nothing
                    }
                });
        AlertDialog dialog = builder.create();
        dialog.show();
    }

}